import {randomUUID} from 'node:crypto';

const SESSION_LIMIT = 500;

type Session = {
  sessionId: string, // Generated by the server
  expiry: Date, // When the session expires
};

let sessions: Session[] = [];

export function validSession (sessionId: string): boolean {
  flushExpiredSessions();

  const session = sessions.find((session) => session.sessionId === sessionId);
  return session != null && session.expiry > new Date();
}

export function generateSessionId(): string {
  const sessionId = randomUUID();
  const expiry = new Date(new Date().getTime() + (60 * 60 * 24 * 1000)); // 24 hours from now

  flushExpiredSessions();

  // Remove the oldest session if we're at the limit
  if(sessions.length >= SESSION_LIMIT) sessions.shift();

  // Add the new session
  sessions.push({sessionId, expiry});

  return sessionId;
}

function flushExpiredSessions() {
  sessions = sessions.filter((session) => !(session.expiry < new Date()));
}